(define-module (GuileLox token-type))
(use-modules (GuileLox char))

(define-public TOKEN_LEFT-PAREN 0)
(define-public TOKEN_RIGHT-PAREN 1)
(define-public TOKEN_LEFT-BRACE 2)
(define-public TOKEN_RIGHT-BRACE 3)
(define-public TOKEN_COMMA 4)
(define-public TOKEN_DOT 5)
(define-public TOKEN_MINUS 6)
(define-public TOKEN_PLUS 7)
(define-public TOKEN_SEMICOLON 8)
(define-public TOKEN_SLASH 9)
(define-public TOKEN_STAR 10)

;; Two Char
(define-public TOKEN_BANG 11)
(define-public TOKEN_BANG-EQUAL 12)
(define-public TOKEN_EQUAL 13)
(define-public TOKEN_EQUAL-EQUAL 14)
(define-public TOKEN_GREATER 15)
(define-public TOKEN_GREATER-EQUAL 16)
(define-public TOKEN_LESS 17)
(define-public TOKEN_LESS-EQUAL 18)

;; Literals
(define-public TOKEN_IDENTIFIER 19)
(define-public TOKEN_STRING 20)
(define-public TOKEN_NUMBER 21)

;; KEYWORDS
(define-public TOKEN_AND 22)
(define-public TOKEN_CLASS 23)
(define-public TOKEN_ELSE 24)
(define-public TOKEN_FALSE 25)
(define-public TOKEN_FUN 26)
(define-public TOKEN_FOR 27)
(define-public TOKEN_IF 28)
(define-public TOKEN_NIL 29)
(define-public TOKEN_OR 30)
(define-public TOKEN_PRINT 31)
(define-public TOKEN_RETURN 32)
(define-public TOKEN_SUPER 33)
(define-public TOKEN_THIS 34)
(define-public TOKEN_TRUE 35)
(define-public TOKEN_VAR 36)
(define-public TOKEN_WHILE 37)
(define-public TOKEN_EOF 38)
(define-public TOKEN_ERROR -1)

(define-public (char-single-token char)
  (cond ((char=? char #\() TOKEN_LEFT-PAREN)
        ((char=? char #\)) TOKEN_RIGHT-PAREN)
        ((char=? char #\{) TOKEN_LEFT-BRACE)
        ((char=? char #\}) TOKEN_RIGHT-BRACE)
        ((char=? char #\,) TOKEN_COMMA)
        ((char=? char #\.) TOKEN_DOT)
        ((char=? char #\-) TOKEN_MINUS)
        ((char=? char #\+) TOKEN_PLUS)
        ((char=? char #\;) TOKEN_SEMICOLON)
        ((char=? char #\*) TOKEN_STAR)
        (else TOKEN_ERROR)))

(define-public (keyword->token-type str)
  (cond ((string=? "and" str) TOKEN_AND)
        ((string=? "class" str) TOKEN_CLASS)
        ((string=? "else" str) TOKEN_ELSE)
        ((string=? "fun" str) TOKEN_FUN)
        ((string=? "for" str) TOKEN_FOR)
        ((string=? "if" str) TOKEN_IF)
        ((string=? "or" str) TOKEN_OR)
        ((string=? "print" str) TOKEN_PRINT)
        ((string=? "return" str) TOKEN_RETURN)
        ((string=? "super" str) TOKEN_SUPER)
        ((string=? "this" str) TOKEN_THIS)
        ((string=? "true" str) TOKEN_TRUE)
        ((string=? "false" str) TOKEN_FALSE)
        ((string=? "nil" str) TOKEN_NIL)
        ((string=? "var" str) TOKEN_VAR)
        ((string=? "while" str) TOKEN_WHILE)
        (else TOKEN_IDENTIFIER)))

(define-public (char-single-token? char) (not (= -1 (char-single-token char))))

(define-public (char-double-token? char)
  (or (char=? char #\!) 
      (char=? char #\=)
      (char=? char #\<)
      (char=? char #\>)
      (char=? char #\/)))

(define-public (match-double-token first second)
  (cond ((char=? first #\!)
         (cond ((char=? second #\=) TOKEN_BANG-EQUAL)
               (else TOKEN_BANG)))
        ((char=? first #\=) 
         (cond ((char=? second #\=) TOKEN_EQUAL-EQUAL)
               (else TOKEN_EQUAL)))
        ((char=? first #\>)
         (cond ((char=? second #\=) TOKEN_GREATER-EQUAL)
               (else TOKEN_GREATER)))
        ((char=? first #\<)
         (cond ((char=? second #\=) TOKEN_LESS-EQUAL)
               (else TOKEN_LESS)))
        ((char=? first #\/) (error "Need to implement comment parsing"))))

(define-public (tokentype->string type)
  (case type ((-1) "TOKEN_ERROR")
        ((0) "TOKEN_LEFT-PAREN")
        ((1) "TOKEN_RIGHT-PAREN")
        ((2) "TOKEN_LEFT-BRACE")
        ((3) "TOKEN_RIGHT-BRACE")
        ((4) "TOKEN_COMMA")
        ((5) "TOKEN_DOT")
        ((6) "TOKEN_MINUS")
        ((7) "TOKEN_PLUS")
        ((8) "TOKEN_SEMICOLON")
        ((9) "TOKEN_SLASH")
        ((10) "TOKEN_STAR")
        ((11) "TOKEN_BANG")
        ((12) "TOKEN_BANG-EQUAL")
        ((13) "TOKEN_EQUAL")
        ((14) "TOKEN_EQUAL-EQUAL")
        ((15) "TOKEN_GREATER")
        ((16) "TOKEN_GREATER-EQUAL")
        ((17) "TOKEN_LESS")
        ((18) "TOKEN_LESS-EQUAL")
        ((19) "TOKEN_IDENTIFIER")
        ((20) "TOKEN_STRING")
        ((21) "TOKEN_NUMBER")
        ((22) "TOKEN_AND")
        ((23) "TOKEN_CLASS")
        ((24) "TOKEN_FOR")
        ((25) "TOKEN_FALSE")
        ((26) "TOKEN_FUN")
        ((27) "TOKEN_FOR")
        ((28) "TOKEN_IF")
        ((29) "TOKEN_NIL")
        ((30) "TOKEN_OR")
        ((31) "TOKEN_PRINT")
        ((32) "TOKEN_RETURN")
        ((33) "TOKEN_SUPER")
        ((34) "TOKEN_THIS")
        ((35) "TOKEN_TRUE")
        ((36) "TOKEN_VAR")
        ((37) "TOKEN_WHILE")
        ((38) "TOKEN_EOF")))
